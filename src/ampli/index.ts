/* tslint:disable */
/* eslint-disable */
// @ts-nocheck
/**
 * Ampli - A strong typed wrapper for your Analytics
 *
 * This file is generated by Amplitude.
 * To update run 'ampli pull swap_client'
 *
 * Required dependencies: @amplitude/analytics-browser@^1.3.0
 * Tracking Plan Version: 1
 * Build: 1.0.0
 * Runtime: browser:typescript-ampli-v2
 *
 * [View Tracking Plan](https://data.amplitude.com/henry/Swap%20Development/events/main/latest)
 *
 * [Full Setup Instructions](https://data.amplitude.com/henry/Swap%20Development/implementation/swap_client)
 */

import * as amplitude from '@amplitude/analytics-browser';

export type Environment = 'swapdevelopment';

export const ApiKey: Record<Environment, string> = {
  swapdevelopment: '6beb39a3f5db15a29d454d5c88bd7ffc'
};

/**
 * Default Amplitude configuration options. Contains tracking plan information.
 */
export const DefaultConfiguration: BrowserOptions = {
  plan: {
    version: '1',
    branch: 'main',
    source: 'swap_client',
    versionId: '860af6b3-b755-4d19-8009-b0a8985c5f17'
  },
  ...{
    ingestionMetadata: {
      sourceName: 'browser-typescript-ampli',
      sourceVersion: '2.0.0'
    }
  }
};

export interface LoadOptionsBase { disabled?: boolean }

export type LoadOptionsWithEnvironment = LoadOptionsBase & { environment: Environment; client?: { configuration?: BrowserOptions; }; };
export type LoadOptionsWithApiKey = LoadOptionsBase & { client: { apiKey: string; configuration?: BrowserOptions; } };
export type LoadOptionsWithClientInstance = LoadOptionsBase & { client: { instance: BrowserClient; } };

export type LoadOptions = LoadOptionsWithEnvironment | LoadOptionsWithApiKey | LoadOptionsWithClientInstance;

export interface IdentifyProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Chain ID"?: number;
  "Wallet Name"?: string;
}

export interface BuyTokenSelectedProperties {
  Address: string;
  Name: string;
  Symbol: string;
}

export interface ChainSelectedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Chain ID": number;
}

export interface SellTokenSelectedProperties {
  Address: string;
  Name: string;
  Symbol: string;
}

export interface TradeCompletedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Buy Amount": number;
  "Buy Token": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Chain ID": number;
  Reverted: boolean;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Sell Amount": number;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Sell Amount USD": number;
  "Sell Token": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  "Slippage Bps": number;
  "Transaction Hash": string;
  ZID?: string;
}

export interface TradeSubmittedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Buy Amount": number;
  "Buy Token": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Chain ID": number;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Sell Amount": number;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Sell Amount USD": number;
  "Sell Token": string;
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | integer |
   */
  "Slippage Bps": number;
  "Transaction Hash": string;
  ZID?: string;
}

export interface WalletConnectedProperties {
  /**
   * | Rule | Value |
   * |---|---|
   * | Type | number |
   */
  "Chain ID": number;
  "Wallet Name": string;
}

export class Identify implements BaseEvent {
  event_type = amplitude.Types.SpecialEventType.IDENTIFY;

  constructor(
    public event_properties?: IdentifyProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class BuyTokenSelected implements BaseEvent {
  event_type = 'Buy Token Selected';

  constructor(
    public event_properties: BuyTokenSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class ChainSelected implements BaseEvent {
  event_type = 'Chain Selected';

  constructor(
    public event_properties: ChainSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class SellTokenSelected implements BaseEvent {
  event_type = 'Sell Token Selected';

  constructor(
    public event_properties: SellTokenSelectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class TradeCompleted implements BaseEvent {
  event_type = 'Trade Completed';

  constructor(
    public event_properties: TradeCompletedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class TradeSubmitted implements BaseEvent {
  event_type = 'Trade Submitted';

  constructor(
    public event_properties: TradeSubmittedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export class WalletConnected implements BaseEvent {
  event_type = 'Wallet Connected';

  constructor(
    public event_properties: WalletConnectedProperties,
  ) {
    this.event_properties = event_properties;
  }
}

export type PromiseResult<T> = { promise: Promise<T | void> };

const getVoidPromiseResult = () => ({ promise: Promise.resolve() });

// prettier-ignore
export class Ampli {
  private disabled: boolean = false;
  private amplitude?: BrowserClient;

  get client(): BrowserClient {
    this.isInitializedAndEnabled();
    return this.amplitude!;
  }

  get isLoaded(): boolean {
    return this.amplitude != null;
  }

  private isInitializedAndEnabled(): boolean {
    if (!this.amplitude) {
      console.error('ERROR: Ampli is not yet initialized. Have you called ampli.load() on app start?');
      return false;
    }
    return !this.disabled;
  }

  /**
   * Initialize the Ampli SDK. Call once when your application starts.
   *
   * @param options Configuration options to initialize the Ampli SDK with.
   */
  load(options: LoadOptions): PromiseResult<void> {
    this.disabled = options.disabled ?? false;

    if (this.amplitude) {
      console.warn('WARNING: Ampli is already intialized. Ampli.load() should be called once at application startup.');
      return getVoidPromiseResult();
    }

    let apiKey: string | null = null;
    if (options.client && 'apiKey' in options.client) {
      apiKey = options.client.apiKey;
    } else if ('environment' in options) {
      apiKey = ApiKey[options.environment];
    }

    if (options.client && 'instance' in options.client) {
      this.amplitude = options.client.instance;
    } else if (apiKey) {
      this.amplitude = amplitude.createInstance();
      const configuration = (options.client && 'configuration' in options.client) ? options.client.configuration : {};
      return this.amplitude.init(apiKey, undefined, { ...DefaultConfiguration, ...configuration });
    } else {
      console.error("ERROR: ampli.load() requires 'environment', 'client.apiKey', or 'client.instance'");
    }

    return getVoidPromiseResult();
  }

  /**
   * Identify a user and set user properties.
   *
   * @param userId The user's id.
   * @param properties The user properties.
   * @param options Optional event options.
   */
  identify(
    userId: string | undefined,
    properties?: IdentifyProperties,
    options?: EventOptions,
  ): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    if (userId) {
      options = {...options,  user_id: userId};
    }

    const amplitudeIdentify = new amplitude.Identify();
    const eventProperties = properties;
    if (eventProperties != null) {
      for (const [key, value] of Object.entries(eventProperties)) {
        amplitudeIdentify.set(key, value);
      }
    }
    return this.amplitude!.identify(
      amplitudeIdentify,
      options,
    );
  }

 /**
  * Flush the event.
  */
  flush() : PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.flush();
  }

  /**
   * Track event
   *
   * @param event The event to track.
   * @param options Optional event options.
   */
  track(event: Event, options?: EventOptions): PromiseResult<Result> {
    if (!this.isInitializedAndEnabled()) {
      return getVoidPromiseResult();
    }

    return this.amplitude!.track(event, undefined, options);
  }

  /**
   * Buy Token Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/henry/Swap%20Development/events/main/latest/Buy%20Token%20Selected)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. Address)
   * @param options Amplitude event options.
   */
  buyTokenSelected(
    properties: BuyTokenSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new BuyTokenSelected(properties), options);
  }

  /**
   * Chain Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/henry/Swap%20Development/events/main/latest/Chain%20Selected)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. Chain ID)
   * @param options Amplitude event options.
   */
  chainSelected(
    properties: ChainSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new ChainSelected(properties), options);
  }

  /**
   * Sell Token Selected
   *
   * [View in Tracking Plan](https://data.amplitude.com/henry/Swap%20Development/events/main/latest/Sell%20Token%20Selected)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. Address)
   * @param options Amplitude event options.
   */
  sellTokenSelected(
    properties: SellTokenSelectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new SellTokenSelected(properties), options);
  }

  /**
   * Trade Completed
   *
   * [View in Tracking Plan](https://data.amplitude.com/henry/Swap%20Development/events/main/latest/Trade%20Completed)
   *
   * This event is fired when a user submits a transaction (trade) to the blockchain and the transaction is settled on chain.
   *
   * @param properties The event's properties (e.g. Buy Amount)
   * @param options Amplitude event options.
   */
  tradeCompleted(
    properties: TradeCompletedProperties,
    options?: EventOptions,
  ) {
    return this.track(new TradeCompleted(properties), options);
  }

  /**
   * Trade Submitted
   *
   * [View in Tracking Plan](https://data.amplitude.com/henry/Swap%20Development/events/main/latest/Trade%20Submitted)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. Buy Amount)
   * @param options Amplitude event options.
   */
  tradeSubmitted(
    properties: TradeSubmittedProperties,
    options?: EventOptions,
  ) {
    return this.track(new TradeSubmitted(properties), options);
  }

  /**
   * Wallet Connected
   *
   * [View in Tracking Plan](https://data.amplitude.com/henry/Swap%20Development/events/main/latest/Wallet%20Connected)
   *
   * Event has no description in tracking plan.
   *
   * @param properties The event's properties (e.g. Chain ID)
   * @param options Amplitude event options.
   */
  walletConnected(
    properties: WalletConnectedProperties,
    options?: EventOptions,
  ) {
    return this.track(new WalletConnected(properties), options);
  }
}

export const ampli = new Ampli();

// BASE TYPES
type BrowserOptions = amplitude.Types.BrowserOptions;

export type BrowserClient = amplitude.Types.BrowserClient;
export type BaseEvent = amplitude.Types.BaseEvent;
export type IdentifyEvent = amplitude.Types.IdentifyEvent;
export type GroupEvent = amplitude.Types.GroupIdentifyEvent;
export type Event = amplitude.Types.Event;
export type EventOptions = amplitude.Types.EventOptions;
export type Result = amplitude.Types.Result;
